.default_cache: &default_cache
  key: ${CI_RUNNER_ID}-${CI_JOB_IMAGE}
  paths:
    - ${JULIA_DEPOT_PATH}/artifacts
    - ${JULIA_DEPOT_PATH}/compiled
    - ${JULIA_DEPOT_PATH}/logs
    - ${JULIA_DEPOT_PATH}/packages
    - ${JULIA_DEPOT_PATH}/scratchspaces

default:
  interruptible: true
  cache: *default_cache

variables:
  JULIA_DEPOT_PATH: ${CI_PROJECT_DIR}/.julia

# Prevent duplicate pipelines
# https://docs.gitlab.com/ee/ci/yaml/workflow.html#switch-between-branch-pipelines-and-merge-request-pipelines
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

.script:
  script:
    - julia --project=@. -e "using Pkg; Pkg.build(); Pkg.test(coverage=${COVERAGE-false})"
    - find ${JULIA_DEPOT_PATH} -name '*.cov' -delete

.rules:
  rules:
    - if: $CI_COMMIT_BRANCH =~ /doc/
      when: never
    - when: always

test:
  parallel:
    matrix:
      - IMAGE:
          - julia:1.10
          - julia:1
  image: $IMAGE
  variables:
    COVERAGE: "true"
  extends:
    - .script
    - .rules
  artifacts:
    when: always
    name: artifact-$IMAGE
    paths:
      - "**/*.cov"

benchmark:
  image: julia:1.10
  cache:
    - *default_cache
    - key: ${CI_RUNNER_ID}-tune
      paths:
        - benchmark/tune.json
  script:
    - julia -e 'import Pkg; Pkg.add(["BenchmarkTools", "MORWiki", "PkgBenchmark"])'
    - julia --project=@. -e 'import Pkg; Pkg.instantiate()'
    - julia --project=@. -e 'import DifferentialRiccatiEquations as DRE; using PkgBenchmark; data = benchmarkpkg(DRE); export_markdown("report.md", data)'
  artifacts:
    paths:
      - "report.md"

coverage:
  image: julia:1.6
  needs:
    - test
  extends:
    - .rules
  coverage: /Test coverage (\d+\.\d+%)/
  script:
    - |
      julia --project=@. -e '
      using Pkg
      Pkg.add("LocalCoverage")
      using LocalCoverage
      c = generate_coverage(; run_test=false)
      # Print overview
      using Printf
      @printf "Test coverage %.2f%%\n" c.coverage_percentage
      # Generate detailed report for GitLab
      using LocalCoverage: COVDIR, LCOVINFO
      cobertura = joinpath(COVDIR, "cobertura.xml")
      lcov = joinpath(COVDIR, LCOVINFO)
      write_lcov_to_xml(cobertura, lcov)
      '
  artifacts:
    paths:
      - coverage/lcov.info
      - coverage/cobertura.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura.xml
